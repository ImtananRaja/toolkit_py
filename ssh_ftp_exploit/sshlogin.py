#!/usr/bin/python

# to syntax check run
# python -m py_compile <filename>

# may need to install this
# yourself in the python package manager
import pexpect

PROMPT = ['# ', '>>> ', '> ', '\$ ']


def connect(user, host, password):
    print "connecting to machine and executing command"
    ssh_newkey = "Are you sure you want to continue connecting"
    conStr = 'ssh ' + user + '@' + host
    # connect to machine using pexpect.spawn and connection string
    child = pexpect.spawn(conStr)
    # what we expect to comeback from the spawn
    # Timeout, the string ssh_newkey or password either with capital P or p
    # child.expect returns 0 or 1
    ret = child.expect([pexpect.TIMEOUT, ssh_newkey, '[P|p]assword: '])
    if ret == 0:
        # Error if anything other than ssh_newkey or password
        print "[-] Error Connecting"
    if ret == 1:
        # Send yes when the ssh_key comes up
        child.sendline('yes')
        # we then expect the password prompt
        ret = child.expect([pexpect.TIMEOUT, '[P|p]assword: '])
        if ret == 0:
            print "[-] Error Connecting"
            return
    child.sendline(password)
    # expect this global list of various PROMPTs
    child.expect(PROMPT)
    return child

def send_command(child, command):
    print "Executing command: " + command
    child.sendline(command)
    child.expect(PROMPT)
    # print the command which was executed on the guest system
    print child.before


def main():
    host = raw_input("Please input the host you want to connect to: ")
    user = raw_input("Please input the user you want to connect to: ")
    password = raw_input("Please input the password: ")
    # connect to the guest/vulnerable machine
    child = connect(user, host, password)
    command = raw_input("Please type the command/s you want to execute: ")
    # connecting and executing on machine
    send_command(child, command)


if __name__ == '__main__':
    main()
